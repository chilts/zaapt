!1 Who is Zaapt for?

Before answering this question, first I will describe what Zaapt actually is.

Zaapt is fairly minimal and only consists of Perl modules, Mason components and
database patch scripts. All of these files are passive in nature and all need
something else to use them. Zaapt comes with no infrastucture to let you use
these things nor to help you set up an actual site.

This is all on purpose!

The main reason for this minimal structure is so that Zaapt doesn't force any
particular kind of infrastructure on you besides it's essential requirements
such as Perl, Mason, PostgreSQL).

Therefore, you may set up Zaapt using \c{apache-perl}, \c{apache2}, \c{lighttd}
and \c{libfcgi-perl} and (theoretically) many other configurations.

It also means you have to decide how you do your sessions, cookies, caching,
load balancing and various other things you really need to think about when
building a site. In some cases, you can install one of the \c{zaapt-demo}
packages and it will be perfectly fine for you, but if you are wanting to build
a high-traffic site, then you probably want to think about these things a
little harder.

!2 First and foremost, Zaapt is for Programmers

All of this means that \c{Zaapt} is more like a programmer's CMS rather than an
end-user CMS. This is for two reasons:

* because it's too hard to set up for the end user
* it was written by a programmer who wants to have control of these things on \
  each site installation

None of this inhibits the possibility that an end-user CMS can be written which
uses Zaapt and in fact, one would be very welcome. Please see \l{How to make an
End-User CMS using Zaapt|how-to-make-an-end-user-cms-using-zaapt.html} for
initial details. Also see the Zaapt Demo sites for an example of something
which can be installed for an end user and be instantly usable.

One of the main reasons why Zaapt was written is because I was creating new
websites fairly frequently which all contained the same elements, like a blog
(or blogs), news, content etc. I wanted a way whereby I could leverage off one
implementation of these models but still retain a lot of control regarding the
site's infrastructure and it's look and feel.

One thrown-away implementation later and Zaapt was born.

!2 Secondly, Zaapt is for End-Users

If a programmer has set up Zaapt for use by an end-user then it will look
perfectly like a full-blown CMS to them. It's just not suitable for an end-user
out of the box, that's all. Certain things need to be filled in.

!2 Future

Hopefully one day in the future, a package can be installed which will depend
on Zaapt and get a site up and running straight away.

Remember, however, that if such a thing existed, it would have to decide which
implementations of cookies, sessions, caching and how the content sections map
onto the site for you. This is great for getting a site up and running but bad
if you want to have full control. Packages like this could give you a leg-up to
a more customised site too though.

Unlike the \c{zaapt-demo} sites, the ability to add new sections and be mapped
via the admin interface onto the site will also be taken care of. The Zaapt
Demo sites don't work like this and need a code change for all new sections.

(Ends)
