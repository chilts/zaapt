%# ----------------------------------------------------------------------------
<%args>
    $zaapt
    $perms
    $_act          => 'add'
    $b_id          => undef
    $b_name        => ''
    $b_title       => ''
    $b_description => ''
    $b_show        => ''
    $b_moderate    => ''
    $b_comment     => ''
    $b_trackback   => ''
    $_admin        => ''
    $_view         => ''
    $_edit         => ''
    $_publish      => ''
    $_comment      => ''
    $_trackback    => ''
</%args>
%# ----------------------------------------------------------------------------
<%once>
    use URI::Escape;

    my $heading = {
        add => 'Add',
        ins => 'Add',
        edit => 'Edit',
        upd  => 'Edit',
        rem  => 'Delete',
    };
</%once>
%# ----------------------------------------------------------------------------
<%init>
    my $model = $zaapt->get_model('Blog');

    # some data manipulation
    $b_description = Zaapt::Utils::Conv::remove_cr( $b_description );
    $b_moderate = Zaapt::Utils::Conv::to_bool( $b_moderate );
    $b_comment = Zaapt::Utils::Conv::to_bool( $b_comment );
    $b_trackback = Zaapt::Utils::Conv::to_bool( $b_trackback );

    my $err = [];
    my $values = {};
    my $blog;

    # check permissions for ins/add, but check on the blog for all other actions
    if ( $_act eq 'add' or $_act eq 'ins' ) {
        $m->redirect('edit-b-list.html')
            unless exists $perms->{super};
    }
    else {
        # get 'blog', check permissions
        $blog = $model->sel_blog({ b_id => $b_id });
        $m->redirect('edit-b-list.html')
            unless defined $blog;
        $m->redirect( 'edit-b-list.html?b_id=' . uri_escape($b_id) )
            unless exists $perms->{$blog->{_admin}};
    }

    # let's do some of the actions
    if ( $_act eq 'add' ) {
        $values->{_act} = 'ins';
        $values->{submit} = 'Add Blog';
    }
    elsif ( $_act eq 'ins' ) {
        # check that these values are valid
        unless ( Zaapt::Utils::Valid::is_valid_name($b_name, 'Name') ) {
            push @$err, Zaapt::Utils::Valid::err();
        }

        # no Blog of this name should already exist
        if ( $model->sel_blog_using_name({ b_name => $b_name }) ) {
            push @$err, "Blog name '$b_name' already exists."
        }

        unless ( Zaapt::Utils::Valid::has_content($b_title, 'Title') ) {
            push @$err, Zaapt::Utils::Valid::err();
        }

        unless ( Zaapt::Utils::Valid::is_non_negative_integer($b_show, 'Show') ) {
            push @$err, Zaapt::Utils::Valid::err();
        }

        # do the insert
        unless ( @$err ) {
            $model->ins_blog({
                b_name        => $b_name,
                b_title       => $b_title,
                b_description => $b_description,
                b_show        => $b_show,
                b_moderate    => $b_moderate,
                b_comment     => $b_comment,
                b_trackback   => $b_trackback,
                _admin        => $_admin,
                _view         => $_view,
                _edit         => $_edit,
                _publish      => $_publish,
                _comment      => $_comment,
                _trackback    => $_trackback,
            });
            $m->redirect("edit-b-list.html");
            return;
        }

        $values = { %ARGS };
        $values->{submit} = 'Add Blog';
    }
    elsif ( $_act eq 'edit' ) {
        $values = $blog;
        $values->{_act} = 'upd';
        $values->{submit} = 'Save Blog';
    }
    elsif ( $_act eq 'upd' ) {
        # check that these values are valid
        unless ( Zaapt::Utils::Valid::is_valid_name($b_name, 'Name') ) {
            push @$err, Zaapt::Utils::Valid::err();
        }

        # no Blog of this name should already exist
        my $check_blog = $model->sel_blog_using_name({ b_name => $b_name });
        if ( defined $check_blog and $check_blog->{b_id} != $b_id ) {
            push @$err, "Blog name '$b_name' already exists."
        }

        unless ( Zaapt::Utils::Valid::has_content($b_title, 'Title') ) {
            push @$err, Zaapt::Utils::Valid::err();
        }

        unless ( Zaapt::Utils::Valid::is_non_negative_integer($b_show, 'Show') ) {
            push @$err, Zaapt::Utils::Valid::err();
        }

        # do the update
        unless ( @$err ) {
            $model->upd_blog({
                b_name        => $b_name,
                b_title       => $b_title,
                b_description => $b_description,
                b_show        => $b_show,
                b_moderate    => $b_moderate,
                b_comment     => $b_comment,
                b_trackback   => $b_trackback,
                _admin        => $_admin,
                _view         => $_view,
                _edit         => $_edit,
                _publish      => $_publish,
                _comment      => $_comment,
                _trackback    => $_trackback,
                b_id          => $b_id,
            });
            $m->redirect("edit-b-list.html");
            return;
        }

        $values = { %ARGS };
        $values->{submit} = 'Add Blog';
    }
    elsif ( $_act eq 'rem' ) {
        $values = $blog;
        $values->{_act} = 'del';
        $values->{submit} = 'Delete Blog';
    }
    elsif ( $_act eq 'del' ) {
        # delete
        $model->del_blog({ b_id => $b_id });
        $m->redirect("edit-b-list.html");
        return;
    }

    # create the dropdown options for each role
    my $options = $m->comp('/zaapt/common/permission_options.mhtml', zaapt => $zaapt);
</%init>
%# ----------------------------------------------------------------------------
<h1><% $heading->{$_act} | n %> a Blog</h1>

<p><a href="edit-b-list.html">&laquo; Back to Blog List</a></p>

% if ( defined $blog ) {
<h2>Blog: <% $blog->{b_name} | h %> - '<% $blog->{b_title} | h %>'</h2>
% } else {
<h2>Blog: ?</h2>
% }

<& /zaapt/common/err.mhtml, err => $err &>

<& /zaapt/common/form/edit.mhtml,
    action => '?',
    values => $values,
    elements => [
        { type => 'hidden', name => '_act' },
        { type => 'hidden', name => 'b_id', def => '' },
        { type => 'text', field => 'Name', name => 'b_name', size => 40, def => '' },
        { type => 'text', field => 'Title', name => 'b_title', size => 40, def => '' },
        { type => 'textarea', field => 'Description', name => 'b_description', rows => 10, cols => 40, def => '' },
        { type => 'text', field => 'Show', name => 'b_show', size => 3, def => 20 },
        { type => 'checkbox', field => 'Moderate', name => 'b_moderate', checked => $b_moderate },
        { type => 'checkbox', field => 'Comment', name => 'b_comment', checked => $b_comment },
        { type => 'checkbox', field => 'Trackback', name => 'b_trackback', checked => $b_trackback },

        { type => 'select', field => 'Admin Perm', name => '_admin', options => $options },
        { type => 'note', def => "Note: Allows this user to delete this entire blog." },
        { type => 'select', field => 'View Perm', name => '_view', options => $options },
        { type => 'note', def => "Note: Allows this user to view all entries." },
        { type => 'select', field => 'Edit Perm', name => '_edit', options => $options },
        { type => 'note', def => "Note: Allows this user to add, edit and delete blog entries and labels." },
        { type => 'select', field => 'Publish Perm', name => '_publish', options => $options },
        { type => 'note', def => "Note: Allows this user to publish blog entries (not yet implemented)." },
        { type => 'select', field => 'Comment Perm', name => '_comment', options => $options },
        { type => 'note', def => "Note: Allows this user to moderate comments." },
        { type => 'select', field => 'Trackback Perm', name => '_trackback', options => $options },
        { type => 'note', def => "Note: Allows this user to moderate trackbacks." },

        { type => 'submit', name => 'submit', field => 'Actions', cancel => 1, location => 'edit-b-list.html' },
    ]
&>
%# ----------------------------------------------------------------------------
