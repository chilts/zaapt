%# ----------------------------------------------------------------------------
<%doc>

    The input args are:
    - $domain - e.g. 'zaapt.org.nz' (no http:// or trailing slash)
    - $path - e.g. 'blog' (no preceeding/trailing slashes)

</%doc>
%# ----------------------------------------------------------------------------
<%once>
    use XML::RSS;
    use HTML::Entities;
    my $tm = {
        '01' => 'Jan', '02' => 'Feb', '03' => 'Mar', '04' => 'Apr',
        '05' => 'May', '06' => 'Jun', '07' => 'Jul', '08' => 'Aug',
        '09' => 'Sep', '10' => 'Oct', '11' => 'Nov', '12' => 'Dec',
    };
</%once>
%# ----------------------------------------------------------------------------
<%args>
    $zaapt
    $b_name
    $domain
    $path   => undef
    $scheme => 'http://'
</%args>
%# ----------------------------------------------------------------------------
<%init>
    my $base_url = "$scheme$domain";
    $base_url .= "/$path" if defined $path;

    my $model = $zaapt->get_model('Blog');
    my $blog = $model->sel_blog_using_name({ b_name => $b_name });
    unless ( defined $blog ) {
        die "Blog '$b_name' not found.";
        return;
    }
    my $entries = $model->sel_entry_latest({ b_id => $blog->{b_id}, _limit => $blog->{b_show} });

    my $date = $entries->[-1]{a_inserted};
    $date =~ /(\d{4})-(\d{2})-(\d{2}) (\d{2}:\d{2}:\d{2})/;
    $date = "$3 $tm->{$2} $1 $4 +1200";

    my $rss = new XML::RSS (version => '2.0');
    $rss->channel(
        title        => $blog->{b_title},
        link         => "http://$domain/",
        language     => 'en',
        description  => $blog->{b_description},
        copyright    => "Copyright $domain",
        pubDate      => $date,
        lastBuildDate => $date,
    );

    foreach my $entry ( @$entries ) {
        $entry->{e_inserted} =~ /(\d{4})-(\d{2})-(\d{2}) (\d{2}:\d{2}:\d{2})/;
        $entry->{e_inserted} = "$3 $tm->{$2} $1 $4 +1200";

        $rss->add_item(
            title => $entry->{e_title},
            link => "$base_url/$entry->{e_name}.html",
            permaLink => "$base_url/$entry->{e_name}.html",
            description => HTML::Entities::encode($entry->{e_intro}),
            dc => {
                creator => $domain,
            },
            pubDate => $entry->{e_inserted},
        );
    }
    print $rss->as_string();
    return;
</%init>
%# ----------------------------------------------------------------------------
