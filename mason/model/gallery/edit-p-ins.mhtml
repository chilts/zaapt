%# ----------------------------------------------------------------------------
<%args>
    $zaapt
    $my_roles
    $g_id
    $p_name        => undef
    $p_title       => undef
    $p_description => undef
</%args>
%# ----------------------------------------------------------------------------
<%once>
    use URI::Escape;
    use Zaapt::Utils::Valid;
    use Zaapt::Utils::Conv;
    use File::Slurp;
    use Image::Imlib2;
    use List::Util qw(max);
    use Image::EXIF;
</%once>
%# ----------------------------------------------------------------------------
<%init>
    my $model = $zaapt->get_model('Gallery');
    my $gallery = $model->sel_gallery({ g_id => $g_id });
    unless ( defined $gallery ) {
        $m->redirect('edit-g-list.html');
        return;
    }

    # check the error conditions first - we need to recover

    # this section firstly needs to exist to be able to add a page
    $m->redirect('edit-g-list.html') unless defined $gallery;
    $m->redirect('edit-g-list.html') unless exists $my_roles->{$gallery->{_edit}};

    # now we're into the normal user errors

    my $err = [];

    if ( $p_name eq '' ) {
        push @$err, "Please specify a name";
    }

    unless ( @$err ) {
        unless ( Zaapt::Utils::Valid::is_valid_name($p_name) ) {
            push @$err, Zaapt::Utils::Valid::err();
        }
    }

    # some data manipulation
    $p_description = Zaapt::Utils::Conv::remove_cr( $p_description );

    # check that this name doesn't already exist in the database for this gallery
    my $picture_exists = $model->sel_picture_in_gallery({ g_id => $g_id, p_name => $p_name });
    if ( defined $picture_exists ) {
        push @$err, "a picture with this name already exists in this gallery";
    }

    # check we actually have a picture
    my $p_filename;
    my $exif_data = {};

    my $upload = $r->upload();
    unless ( defined $upload ) {
        push @$err, "please specify a picture to upload";
    }

    # now, let's get the file and save it somewhere
    unless ( @$err ) {
        # get the input filename
        $p_filename = $upload->filename();

        if ( $p_filename eq '' ) {
            push @$err, 'please specify a picture to upload';
        }
    }

    unless ( @$err ) {
        # get the contents of the file
        my $file_contents;
        my $upload_fh = $upload->fh();
        while( <$upload_fh> ) {
            # loop through the file and copy each line to $file_contents
            $file_contents .= $_;
        }
        close($upload_fh);

        # write out the file (presume it's a '.jpg' for now
        my $filename = "$gallery->{g_path}/$gallery->{g_original}/$p_name.jpg";
        write_file( $filename, $file_contents );

        # load up the image
        my $image = Image::Imlib2->load( $filename );
        my ($w, $h) = ($image->get_width(), $image->get_height());

        # get the sizes from the database
        my $sizes = $model->sel_size_all_in({ g_id => $g_id });

        foreach my $size ( @$sizes ) {
            my $scale_factor = $size->{s_size} / max($w, $h);
            my ($nw, $nh) = ($w * $scale_factor, $h * $scale_factor);

            # setup the new image
            my $scaled = Image::Imlib2->new($nw, $nh);
            $scaled->set_color(255, 255, 255, 255);
            $scaled->image_set_format("jpeg");
            $scaled->set_quality(100);

            # blend the big image onto the smaller
            $scaled->blend( $image, 0, 0, 0, $w, $h, 0, 0, $nw, $nh);
            $scaled->save( "$gallery->{g_path}/$size->{s_path}/$p_name.jpg" );
        }

        # now, finally, save to the database
        $model->begin_work();

        my $hr = {
            g_id          => $g_id,
            p_name        => $p_name,
            p_title       => $p_title,
            p_description => $p_description,
            p_filename    => $p_filename,
        };
        $model->ins_picture($hr);

        # do the EXIF data if required
        if ( $gallery->{g_extractexif} and $p_filename =~ m{ \.jpg \z }xms ) {
            my $exif;
            eval {
                # Image::EXIF sometimes just stops:
                #   (null): doesn't appear to be a JPEG file; searching for start of image
                #   (null): skipped spurious bytes in JPEG
                #   (null): start of image not found
                # and just stops - nothing after this happen but no exception is thrown :-(
                # Certainly when you give it a PNG file anyways...!

                $exif = Image::EXIF->new($filename);

                # hmm, this seems like the logical order (required since I seem to have duplicate keys across these 'infos')
                %$exif_data = (
                    %{$exif->get_unknown_info()},
                    %{$exif->get_other_info()},
                    %{$exif->get_camera_info()},
                    %{$exif->get_image_info()}
                );
            };
            if ( $@ ) {
                $exif_data = {};
                warn $@;
            }

            # retrieve this latest 'picture.id'
            my $p_id = $model->_currval('gallery.picture_id_seq');

            foreach my $f_info ( keys %$exif_data ) {
                my $field = $model->ass_field({ f_info => "EXIF:$f_info", f_description => 'EXIF' });
                $model->ins_detail({
                    p_id    => $p_id,
                    f_id    => $field->{f_id},
                    d_value => $exif_data->{$f_info},
                });
            }
        }

        $model->commit();

        $m->redirect('edit-p-list.html?g_id=' . uri_escape($g_id));
        return;
    }
</%init>
%# ----------------------------------------------------------------------------
<h1>Add a Picture</h1>

<p><a href="edit-g-list.html">&laquo; Back to Gallery List</a></p>

<& edit-render-g-title.mhtml, gallery => $gallery &>

<& /zaapt/common/err.mhtml, err => $err &>

<& /zaapt/common/form.mhtml, action => 'edit-p-ins.html', enctype => 'multipart/form-data', elements => [
        { type => 'hidden', name => 'g_id', value => $g_id },
        { type => 'text', field => 'Name', name => 'p_name', size => 40, value => $p_name },
        { type => 'text', field => 'Title', name => 'p_title', size => 40, value => $p_title },
        { type => 'textarea', field => 'Description', name => 'p_description', rows => 10, cols => 40, value => $p_description },

        { type => 'file', field => 'Image File', name => 'image' },

        { type => 'submit', field => 'Actions', value => 'Add', cancel => 'edit-p-list.html?g_id=' . uri_escape($g_id) },
    ]
&>
%# ----------------------------------------------------------------------------
